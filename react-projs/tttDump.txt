const sizeOfBoard = 3

function Board() {
  const emptyBoard = Array(sizeOfBoard).fill(null).map(() => Array(sizeOfBoard).fill("-"));
  const [board, setBoard] = useState(emptyBoard);
  const [currentPlayer, setCurrentPlayer] = useState("X");


  const handleBoxClick = (rowIndex, colIndex) => {
    if (board[rowIndex][colIndex] !== "-") return;

    const updatedBoard = board.map((row, r) =>
      row.map((cell, c) => {
        if (r === rowIndex && c === colIndex) {
          return currentPlayer;
        }
        return cell;
      })
    );

    setBoard(updatedBoard);

    const winner = checkForWinner(updatedBoard);
    if (winner) {
      alert(`Winner is ${winner}`);
    }

    setCurrentPlayer(currentPlayer === "X" ? "O" : "X");

  };

  return (
    <div>
      <h2>Current Turn: {currentPlayer}</h2>
      {board.map((row, rowIndex) => (
        <Row
          key={rowIndex}
          row={row}
          rowIndex={rowIndex}
          onBoxClick={handleBoxClick}
        />
      ))}
    </div>
  );
}

function Row({ row, rowIndex, onBoxClick }) {
  return (
    <div style={{ display: 'flex' }}>
      {row.map((value, colIndex) => (
        <Box
          key={colIndex}
          value={value}
          onClick={() => onBoxClick(rowIndex, colIndex)}
        />
      ))}
    </div>
  );
}

function Box({ value, onClick }) {
  return (
    <button
      style={{
        border: "solid",
        color: "white",
        height: "100px",
        width: "100px",
        textAlign: 'center',
        fontSize: "30px"
      }}
      onClick={onClick}
    >
      {value}
    </button>
  );
}

